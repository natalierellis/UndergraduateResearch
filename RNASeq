# RNA-Seq Analysis Pipeline
# This pipeline was used in undergraduate research to analyze RNA-Seq data.
# Code adapted from the UC Davis RNA-Seq Workshop (https://github.com/ucdavis-bioinformatics-training/2018-June-RNA-Seq-Workshop).
# Note: This code is not designed to run as the original datasets are no longer accessible.

# Load necessary libraries
library(edgeR)
library(dplyr)
library(limma)

# Set working directory (adjust to your file location)
setwd("C:/Users/12817/OneDrive - Wake Forest University/Senior/Genomics Research")

# Step 1: Read in data
allcounts <- read.delim("VTVRfeatureCounts_chloroRrnaFiltered3_VTmap.csv", 
                        row.names = 1, sep = ",", 
                        check.names = FALSE, na.strings = "", header = TRUE)

# Filter columns to include only relevant RNA-Seq samples
allcountsT <- select(allcounts, contains("R"))

# Step 2: Create DGEList object for downstream analysis
d0 <- DGEList(allcountsT)

# Normalize data using TMM (Trimmed Mean of M-values) method
d0 <- calcNormFactors(d0, method = "TMM")

# Filter lowly expressed genes
keepT1 <- rowSums(edgeR::cpm(d0) > 1) >= 20  # Keep genes expressed in at least 20 samples
dT1 <- d0[keepT1,]

# Optional: Filter highly expressed genes if necessary
keepT2 <- rowSums(edgeR::cpm(dT1) >= 400) < 1  # Remove genes expressed extremely high
dT2 <- dT1[keepT2,]

# Step 3: Set up metadata for experimental groups
anames <- colnames(allcountsT)  # Extract sample names
timepoint <- factor(substr(anames, 1, 2))  # Extract timepoint (first two characters)
treatment <- factor(substr(anames, 3, 3))  # Extract treatment group (third character)
group <- interaction(treatment, timepoint)  # Create interaction of treatment and timepoint

# Step 4: Create MDS plot for quality control
plotMDS(dT2, col = as.numeric(group))

# Step 5: Linear modeling using voom
mm <- model.matrix(~0 + group)  # Design matrix for groups
y <- voom(dT2, mm, plot = TRUE)  # Apply voom transformation
fit <- lmFit(y, mm)  # Fit linear model

# Step 6: Define contrasts and perform differential expression analysis
contr <- makeContrasts(groupD.R1 - groupD.R7, levels = colnames(coef(fit)))  # Define contrast
tmp <- contrasts.fit(fit, contr)  # Apply contrast
tmp <- eBayes(tmp)  # Empirical Bayes moderation
top.table <- topTable(tmp, sort.by = "p", n = Inf)  # Extract top genes
length(which(top.table$adj.P.Val < 0.05))  # Count significant genes (FDR < 0.05)

# Save results to file
write.table(top.table, file = "R_D1vD7_onefactor.csv", row.names = FALSE, sep = "\t", quote = FALSE)

# Step 7: Visualization (Volcano Plot)
df <- data.frame(logFC = top.table$logFC, PValue = top.table$P.Value)

# Identify significant genes
volSIG <- df[df$PValue < 0.05, ]

# Plot volcano plot
plot(c(-6, 6), c(0, 15), type = "n", xlab = "log2(Fold Change)", ylab = "-log10(P-Value)")
points(df$logFC, -log10(df$PValue), pch = 20, col = "gray")
points(volSIG$logFC, -log10(volSIG$PValue), pch = 20, col = "blue")
abline(h = -log10(0.05), col = "red", lty = 2)  # Add significance threshold line

# Step 8: Two-factor model (e.g., treatment and timepoint interaction)
treatmentT <- relevel(factor(treatment), "W")  # Relevel treatment to use "Watered" as reference
mm <- model.matrix(~treatmentT * timepoint)  # Model matrix for interaction
y <- voom(dT2, mm, plot = FALSE)  # Apply voom transformation
fit <- lmFit(y, mm)  # Fit linear model

# Perform differential expression analysis for specific coefficients
tmp <- contrasts.fit(fit, coef = 2)  # Test second coefficient (e.g., treatment effect)
tmp <- eBayes(tmp)
top.table <- topTable(tmp, sort.by = "P", n = Inf)

# Output top significant genes
head(top.table, 20)

# Save results for two-factor model
write.table(top.table, file = "TwoFactorModelResults.csv", row.names = FALSE, sep = "\t", quote = FALSE)
